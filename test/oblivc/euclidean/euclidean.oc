#include <stdio.h>
#include <obliv.oh>

#include "dbg.h"
#include "euclidean.h"


void toObliv(protocolIO *io, obliv int *ox, int *x, int party) {
  for (int i=0; i < io->n; i++)
    ox[i] = feedOblivInt(x[i], party);
}


obliv int osqr(obliv int x) {
  return x*x;
}


obliv int eucDistance(obliv int *ox1, obliv int *ox2, int n) {
  obliv int odist = 0;
  for (int i = 0; i < n; i++)
    odist += osqr(ox1[i]-ox2[i]);
  return odist;
}


void evaluate_distance(protocolIO *io, obliv int *ox1,
                       obliv int *ox2, obliv int osd) {
  int n = io->n;
  obliv int odist = eucDistance(ox1, ox2, n);

  revealOblivInt(&io->dist, odist, 0);
}


void check_input_count(protocolIO *io) {
  int nx = ocBroadcastInt(io->n, 1);
  int ny = ocBroadcastInt(io->n, 2);

  if (nx != ny) {
    log_err("The number of data points given by each party must be the same");
    clean_errno();
    exit(1);
  }
}


void euclideanDistance(void* args) {
  protocolIO *io = args;

  // Define vectors for the two party inputs
  int *x1 = malloc(sizeof(obliv int) * ALLOC);
  int *x2 = malloc(sizeof(obliv int) * ALLOC);

  // Results (the squared distance)
  obliv int osd = 0;

  load_data(io, &x1, &x2, ocCurrentParty());
  check_input_count(io);

  // Store data obliviously
  obliv int *ox1 = malloc(sizeof(obliv int) * io->n);
  obliv int *ox2 = malloc(sizeof(obliv int) * io->n);
  toObliv(io, ox1, x1, 1);
  toObliv(io, ox2, x2, 2);
  free(x1);
  free(x2);

  evaluate_distance(io, ox1, ox2, osd);
  free(ox1);
  free(ox2);
}
